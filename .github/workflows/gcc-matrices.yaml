name: GCC Build Matrices

on: 
  # On pull request we test updates to images
  pull_request: []
 
  # On push to main we build and deploy images
  workflow_dispatch: []

jobs:
  generate:
    name: Generate Build Matrix
    runs-on: ubuntu-latest
    outputs:
      dockerbuild_matrix: ${{ steps.dockerbuild.outputs.dockerbuild_matrix }}
      empty_matrix: ${{ steps.dockerbuild.outputs.dockerbuild_matrix_empty }}

    steps:
    - uses: actions/checkout@v2
      with:
         fetch-depth: 0

    - name: Generate Build Matrix
      uses: vsoch/uptodate@main
      id: dockerbuild
      with: 
        root: docker
        parser: dockerbuild
        flags: "--all"

    - name: View and Check Build Matrix Result
      env:
        result: ${{ steps.dockerbuild.outputs.dockerbuild_matrix }}
      run: |
        echo ${result}
        if [[ "${result}" == "[]" ]]; then
          printf "The matrix is empty, will not trigger next workflow.\n"
        else
          printf "The matrix is not empty, and we should continue on to the next workflow.\n"
        fi

  build:
    needs:
      - generate
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        result: ${{ fromJson(needs.generate.outputs.dockerbuild_matrix) }}
    if: ${{ needs.generate.outputs.empty_matrix == 'false' }}

    name: "Build ${{ matrix.result.container_name }}"
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v2

    - name: GHCR Login
      if: (github.event_name != 'pull_request')
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Make Space For Build
      run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc

    - name: Pull Docker Layers
      env:
        container: ${{ matrix.result.container_name }}
      run: docker pull ${container} || exit 0

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1

    - name: Prepare ${{ matrix.result.container_name }}
      id: builder
      env:
        container: ${{ matrix.result.container_name }}
        prefix: ${{ matrix.result.command_prefix }}
        filename: ${{ matrix.result.filename }}
      run: |
        basedir=$(dirname $filename)
        printf "Base directory is ${basedir}\n"
        # Get relative path to PWD and generate dashed name from it
        cd $basedir
        echo "${prefix} -t ${container} ."
        build_args="$(echo "${prefix#*--build-arg}")"
        echo "dockerfile_dir=${basedir}" >> $GITHUB_ENV
        echo "build_args=${build_args}" >> $GITHUB_ENV
        echo "container=${container}" >> $GITHUB_ENV
        echo "filename=${filename}" >> $GITHUB_ENV
      
    - name: Build & Deploy ${{ matrix.dockerfile[1] }}
      uses: docker/build-push-action@v2
      with:
        context: ${{ env.dockerfile_dir }}
        file: ${{ env.filename }}
        # platforms: 'linux/amd64,linux/ppc64le,linux/arm64'
        platforms: 'linux/amd64'
        push: ${{ github.event_name != 'pull_request' }}
        build-args: ${{ env.build_args }}
        tags: ghcr.io/buildsi/${{ env.container }}
